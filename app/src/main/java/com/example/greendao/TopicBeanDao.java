package com.example.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.alumna.bean.TopicBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOPIC_BEAN".
*/
public class TopicBeanDao extends AbstractDao<TopicBean, Long> {

    public static final String TABLENAME = "TOPIC_BEAN";

    /**
     * Properties of entity TopicBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tid = new Property(1, int.class, "tid", false, "TID");
        public final static Property Uid = new Property(2, int.class, "uid", false, "UID");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Location = new Property(4, String.class, "location", false, "LOCATION");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Imfor = new Property(6, String.class, "imfor", false, "INFORMATION");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
        public final static Property LikeNum = new Property(8, int.class, "likeNum", false, "LIKE_NUMBER");
        public final static Property CommentNum = new Property(9, int.class, "commentNum", false, "COMMENT_NUMBER");
        public final static Property Head = new Property(10, String.class, "head", false, "HEAD");
    }


    public TopicBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TopicBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOPIC_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TID\" INTEGER NOT NULL ," + // 1: tid
                "\"UID\" INTEGER NOT NULL ," + // 2: uid
                "\"USERNAME\" TEXT," + // 3: username
                "\"LOCATION\" TEXT," + // 4: location
                "\"TYPE\" TEXT," + // 5: type
                "\"INFORMATION\" TEXT," + // 6: imfor
                "\"TIME\" TEXT," + // 7: time
                "\"LIKE_NUMBER\" INTEGER NOT NULL ," + // 8: likeNum
                "\"COMMENT_NUMBER\" INTEGER NOT NULL ," + // 9: commentNum
                "\"HEAD\" TEXT);"); // 10: head
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOPIC_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TopicBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTid());
        stmt.bindLong(3, entity.getUid());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String imfor = entity.getImfor();
        if (imfor != null) {
            stmt.bindString(7, imfor);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
        stmt.bindLong(9, entity.getLikeNum());
        stmt.bindLong(10, entity.getCommentNum());
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(11, head);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TopicBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTid());
        stmt.bindLong(3, entity.getUid());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String imfor = entity.getImfor();
        if (imfor != null) {
            stmt.bindString(7, imfor);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
        stmt.bindLong(9, entity.getLikeNum());
        stmt.bindLong(10, entity.getCommentNum());
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(11, head);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TopicBean readEntity(Cursor cursor, int offset) {
        TopicBean entity = new TopicBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // tid
            cursor.getInt(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // location
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imfor
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // time
            cursor.getInt(offset + 8), // likeNum
            cursor.getInt(offset + 9), // commentNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // head
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TopicBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTid(cursor.getInt(offset + 1));
        entity.setUid(cursor.getInt(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImfor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLikeNum(cursor.getInt(offset + 8));
        entity.setCommentNum(cursor.getInt(offset + 9));
        entity.setHead(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TopicBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TopicBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TopicBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
